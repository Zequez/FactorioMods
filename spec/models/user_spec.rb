require 'rails_helper'

RSpec.describe User, :type => :model do
  subject(:user) { build :user }

  it { is_expected.to respond_to :name }
  it { is_expected.to respond_to :email }
  it { is_expected.to respond_to :is_dev? }
  it { is_expected.to respond_to :is_admin? }
  it { is_expected.to respond_to :slug }
  it { is_expected.to respond_to :owned_mods }
  it { expect(user.owned_mods.build).to be_kind_of Mod }
  it { is_expected.to respond_to :authored_mods }
  it { expect(user.authored_mods.build).to be_kind_of Mod }
  it { is_expected.to respond_to :authors_mods }
  it { expect(user.authors_mods.build).to be_kind_of AuthorsMod }
  it { is_expected.to respond_to :autogenerated }

  describe 'validations' do
    it 'should not allow user without name' do
      user = build :user, name: ''
      expect(user).to be_invalid
    end

    it 'should not allow user without email' do
      user = build :user, email: ''
      expect(user).to be_invalid
    end

    it 'should not allow user without password' do
      user = build :user, password: ''
      expect(user).to be_invalid
    end

    it 'should not allow user with missmatching password confirmation' do
      user = build :user, password: 'rsarsarsarsa', password_confirmation: 'asrasrasrasr'
      expect(user).to be_invalid
    end

    it 'should allow spaces in the name' do
      user = build :user, name: 'Potato Head'
      expect(user).to be_valid
    end

    it 'should strip extra spaces and sqeeze them automatically' do
      user = build :user, name: '   Potato     Head   '
      expect(user).to be_valid
      expect(user.name).to eq 'Potato Head'
    end

    it 'should not allow users with the same name' do
      create :user, name: 'HeyHeyNanana'
      user2 = build :user, name: 'HeyHeyNanana'
      expect(user2).to be_invalid
    end

    it 'should not allow users with the same name with different cases' do
      create :user, name: 'HeyHeyNanana'
      user2 = build :user, name: 'heyheynanana'
      expect(user2).to be_invalid
    end

    it 'should not allow names shorter than 2 characters' do
      user = build :user, name: 'a'
      expect(user).to be_invalid
    end

    it 'should allow names of 2 characters' do
      user = build :user, name: '22'
      expect(user).to be_valid
    end

    it 'should not allow names longer than 50 characters' do
      user = build :user, name: 'a'*51
      expect(user).to be_invalid
    end

    it 'should allow names of 50 characters' do
      user = build :user, name: 'a'*50
      expect(user).to be_valid
    end

    it 'should be valid with alphanumeric characters, spaces, dashes, underscores, dots or spaces' do
      expect(build(:user, name: 'Zeq.mán123- _Potatoí')).to be_valid
    end
  end

  describe 'attributes' do
    it 'should generate a slug with the name' do
      user = create :user, name: 'PotatoHead'
      expect(user.slug).to eq 'potatohead'
    end
  end

  describe 'deletion' do
    it 'should blank the author_id of the mods belonging to this user if the user deletes the account' do
      user = create :user
      mod = create :mod, author: user
      expect(mod.author_id).to eq user.id
      user.destroy
      mod.reload
      expect(mod.author_id).to eq nil
    end
  end

  describe '.autogenerate' do
    it 'should build a new user with the name given, a random password, a random email and autogenerated:true' do
      user = User.autogenerate(name: 'Potato')
      expect(user.name).to eq 'Potato'
      expect(user.password.length).to be >= 50
      expect(user.email.length).to be >= 50
      expect(user.autogenerated).to eq true
    end
  end

  describe '.for_validation' do
    it 'should return users with #is_dev and #is_admin set to false that own at least one mod' do
      u1 = create :user, is_dev: false
           create :user, is_dev: false
      u3 = create :user, is_dev: true
      u4 = create :user, is_dev: false, is_admin: true
      u5 = create :user, is_dev: false
      create :mod, owner: u1
      create :mod, owner: u3
      create :mod, owner: u4
      create :mod, owner: u5
      create :mod, owner: u5
      expect(User.for_validation).to match_array [u1, u5]
    end
  end

  describe '#needs_validation?' do
    it 'should return true for users with #is_dev and #is_admin set to false that own at least one mod' do
      u1 = create :user, is_dev: false
      u2 = create :user, is_dev: false
      u3 = create :user, is_dev: true
      u4 = create :user, is_dev: false, is_admin: true
      u5 = create :user, is_dev: false
      create :mod, owner: u1
      create :mod, owner: u3
      create :mod, owner: u4
      create :mod, owner: u5
      create :mod, owner: u5
      expect(u1.needs_validation?).to eq true
      expect(u2.needs_validation?).to eq false
      expect(u3.needs_validation?).to eq false
      expect(u4.needs_validation?).to eq false
      expect(u5.needs_validation?).to eq true
    end
  end

  describe '#validate' do
    it 'should set the user to #is_dev true and all his mods to visible and do nothing if the user is already dev' do
      u1 = create :user, is_dev: false
      u2 = create :user, is_dev: false
      u3 = create :user, is_dev: false
      create :mod, owner: u1, visible: false
      create :mod, owner: u3, visible: false
      create :mod, owner: u3, visible: false
      u1.validate
      u2.validate
      u3.validate
      expect(u1.is_dev).to eq true
      expect(u2.is_dev).to eq true
      expect(u3.is_dev).to eq true
      expect(u1.owned_mods[0].visible).to eq true
      expect(u3.owned_mods[0].visible).to eq true
      expect(u3.owned_mods[1].visible).to eq true
    end

    it 'should not do anything for users with #is_dev true' do
      user = create :user, is_dev: true
      create :mod, owner: user, visible: false
      user.validate
      expect(user.is_dev).to eq true
      expect(user.owned_mods[0].visible).to eq false
    end

    it 'should only set #is_dev to true to admins but not change any mod visibility' do
      user = create :user, is_dev: false, is_admin: true
      create :mod, owner: user, visible: false
      user.validate
      expect(user.is_dev).to eq true
      expect(user.owned_mods[0].visible).to eq false
    end
  end
end
