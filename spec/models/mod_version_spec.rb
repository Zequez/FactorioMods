require 'rails_helper'

RSpec.describe ModVersion, :type => :model do
  subject(:version) { build :mod_version }

  describe '#number' do
    it { expect(version).to respond_to :number }
    it { expect(version.number).to be_kind_of String }
  end

  describe '#released_at' do
    it { expect(version).to respond_to :released_at }
    it { expect(version.released_at).to be_kind_of Time }
  end

  describe '#mod' do
    it { expect(version).to respond_to :mod }
  end

  describe '#sort_order' do
    it { expect(version).to respond_to :sort_order}
    it { expect(version.sort_order).to be_kind_of Integer }
  end

  describe '#precise_game_versions_string' do
    it { expect(version).to respond_to :precise_game_versions_string }
    it { expect(version.precise_game_versions_string).to be_kind_of String }
  end

  describe '#game_versions' do
    it { expect(version).to respond_to :game_versions }
    it { expect(version.game_versions.build).to be_kind_of GameVersion }

    it 'should generate #mod_game_versions when assigning #game_versions' do
      game_versions  = create_list :game_version, 3
      mod = create :mod
      mod_version = build :mod_version, mod: mod
      mod_version.game_versions = game_versions
      mod_version.save!
      mod_version.mod_game_versions.size.should eq 3
    end

    it 'should add #mod_id to all th #mod_game_versions generated by #game_versions' do
      game_versions  = create_list :game_version, 3
      mod = create :mod
      mod_version = build :mod_version, mod: mod
      mod_version.game_versions = game_versions
      mod_version.save!
      mod_game_versions = ModGameVersion.all
      mod_game_versions.map(&:mod_id).should eq [mod.id, mod.id, mod.id]
    end
  end

  describe '#mod_game_versions' do
    it { expect(version).to respond_to :mod_game_versions }
    it { expect(version.mod_game_versions.build).to be_kind_of ModGameVersion }

    it 'should add the #mod_id to the #mod_game_versions before saving' do
      mod = create :mod
      mod_version = build :mod_version, mod: mod
      mod_game_versions = []
      mod_game_versions << create(:mod_game_version)
      mod_game_versions << create(:mod_game_version)
      mod_game_versions << create(:mod_game_version)

      mod_version.mod_game_versions = mod_game_versions
      mod_version.save!
      mod_game_versions = ModGameVersion.all

      mod_game_versions.map(&:mod_id).should eq [mod.id, mod.id, mod.id]
    end
  end

  describe 'validations' do
    it 'should be invalid without a mod' do
      expect(build(:mod_version, mod_id: nil)).to be_invalid
    end

    describe '#number' do
      it 'should be invalid when empty' do
        expect(build(:mod_version, number: nil)).to be_invalid
      end

      it 'should be invalid larger than 20 characters' do
        expect(build(:mod_version, number: '1'*21)).to be_invalid
      end

      it 'should be valid with a length of 20 characters or less' do
        expect(build(:mod_version, number: '1'*20)).to be_valid
      end

      it 'should be invalid with spaces or strange characters' do
        %w{| % $ * ( ) \} #}.push(' ').each do |char|
          expect(build(:mod_version, number: "1.2.#{char}.4")).to be_invalid
        end
      end

      it 'should be valid with alphanumeric characters, spaces, dashes or underscores' do
        expect(build(:mod_version, number: '1.2_3-yes')).to be_valid
      end
    end

    it 'should be invalid with an invalid file' do
      invalid_file = build(:mod_file, attachment: File.new(Rails.root.join('spec', 'fixtures', 'test.jpg')))

      expect(build(:mod_version, files: [invalid_file])).to be_invalid
    end

    describe '#game_versions' do
      it 'be valid without any game version' do
        expect(build(:mod_version, game_versions: [])).to be_valid
      end

      it 'should be invalid when selecting 2 non consecutive game versions' do
        gv1 = create :game_version
        gv2 = create :game_version
        gv3 = create :game_version

        mod_version = build :mod_version, game_versions: [gv1, gv3]

        expect(mod_version).to be_invalid
      end

      it 'should be valid when selecting consecutive game versions' do
        gv1 = create :game_version
        gv2 = create :game_version
        gv3 = create :game_version

        mod_version = build :mod_version, game_versions: [gv2, gv3]

        expect(mod_version).to be_valid
      end
    end

    it 'should be valid without a release date' do
      expect(build(:mod_version, released_at: nil)).to be_valid
    end

    it 'should be invalid with a release date in the future' do
      expect(build(:mod_version, released_at: 1.day.since)).to be_invalid
    end

    it 'should be valid with a release date in the present' do
      expect(build(:mod_version, released_at: Time.now))
    end
  end
end
